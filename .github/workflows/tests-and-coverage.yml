name: Java Tests and Coverage

on:
  push:
    branches: [ main, MedAmineAgoumi, abdellah, imad, najd ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run tests with coverage
      run: |
        cd backend
        mvn clean test -DskipTests=false -Dmaven.test.failure.ignore=true
      
    - name: Generate coverage report
      run: |
        cd backend
        mvn jacoco:report
      continue-on-error: true
        
    - name: Generate JUnit Report
      uses: mikepenz/action-junit-report@v2
      if: always()
      with:
        report_paths: 'backend/target/surefire-reports/TEST-*.xml'
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: 'Test Results'
        # Removed invalid parameters
      
    # Using a more basic approach for artifacts
    - name: Archive test results
      if: always()
      run: |
        mkdir -p artifacts/test-results
        cp -r backend/target/surefire-reports/* artifacts/test-results/ || echo "No test results found"
        
    - name: Archive coverage report
      if: always()
      run: |
        mkdir -p artifacts/coverage
        cp -r backend/target/site/jacoco/* artifacts/coverage/ || echo "No coverage report found"
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: test-and-coverage-reports
        path: artifacts/
        
    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        if ls backend/target/surefire-reports/TEST-*.xml 1> /dev/null 2>&1; then
          TOTAL=$(grep -r "<testsuite" backend/target/surefire-reports/ | grep -o "tests=\"[0-9]*\"" | grep -o "[0-9]*" | awk '{s+=$1} END {print s}')
          FAILURES=$(grep -r "<testsuite" backend/target/surefire-reports/ | grep -o "failures=\"[0-9]*\"" | grep -o "[0-9]*" | awk '{s+=$1} END {print s}')
          ERRORS=$(grep -r "<testsuite" backend/target/surefire-reports/ | grep -o "errors=\"[0-9]*\"" | grep -o "[0-9]*" | awk '{s+=$1} END {print s}')
          SKIPPED=$(grep -r "<testsuite" backend/target/surefire-reports/ | grep -o "skipped=\"[0-9]*\"" | grep -o "[0-9]*" | awk '{s+=$1} END {print s}')
          PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))
          
          echo "- **Total tests:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $FAILURES" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors:** $ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped:** $SKIPPED" >> $GITHUB_STEP_SUMMARY
          
          # List failed tests
          if [ "$FAILURES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            grep -r "<testcase.*>.*<failure" backend/target/surefire-reports/ --include="*.xml" | sed -E 's/.*<testcase.*name="([^"]*)".*classname="([^"]*)".*<failure.*/- \2.\1/' | sort >> $GITHUB_STEP_SUMMARY || echo "Could not parse failed tests"
          fi
        else
          echo "No test results found" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true
        
    - name: Coverage Report Summary
      if: always()
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        if [ -f backend/target/site/jacoco/index.html ]; then
          cd backend/target/site/jacoco/
          COVERAGE=$(grep -o 'Total[^%]*%' index.html || echo "Coverage data not found")
          echo "Overall coverage: $COVERAGE" >> $GITHUB_STEP_SUMMARY
        else
          echo "JaCoCo report not generated. Check test results for errors." >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true